(* dappl in 25 lines of Eff *)

effect Flip : float -> bool
effect Reward : float -> unit
effect Observe : bool -> unit

let flip p      = perform (Flip p) ;;
let rew k       = perform (Reward k) ;;
let observe b   = perform (Observe b) ;;   

let dv x y = if y = 0. then 0. else x /. y ;;

let dappl_m = handler 
| v                     ->  if v then (1., 0., 0.) else (0., 1., 0.)
| effect (Flip p) k     ->  let (at, bt, ct)    = k true    in
                            let (af, bf, cf)    = k false   in
                            let q               = (1. -. p) in
                            ((p *. at) +. (q *. af),
                            (p *. bt) +. (q *. bf),
                            (p *. ct) +. (q *. cf) )
| effect (Reward n) k   ->  let (a, b, c)       = k ()      in
                            let norm            = a +. b    in 
                            (a , b, (n *. a) +. c)
| effect (Observe b) k  -> if b then k () else (0., 0., 0.)
| finally (a, b, c)     -> dv c (a +. b)
;;

let dappl_j = handler 
| v                     ->  if v then (1., 0., 0.) else (0., 1., 0.)
| effect (Flip p) k     ->  let (at, bt, ct)    = k true    in
                            let (af, bf, cf)    = k false   in
                            let q               = (1. -. p) in
                            ((p *. at) +. (q *. af),
                            (p *. bt) +. (q *. bf),
                            (p *. ct) +. (q *. cf) )
| effect (Reward n) k   ->  let (a, b, c)       = k ()      in
                            let norm            = a +. b    in 
                            (a , b, (n *. norm) +. c)
| effect (Observe b) k  -> if b then k () else (0., 0., 0.)
| finally (a, b, c)     -> ((a,b,c), dv c (a +. b))
;;

type 'a bot = Val of 'a | Bot

let combine p dist1 dist2 =
  let scale p dist = map (fun (x, q) -> (x, p *. q)) dist in
  let rec add (x, p) = function
    | [] -> [(x, p)]
    | (y, q) :: dist ->
      if x = y then (x, p +. q) :: dist else (y, q) :: add (x, p) dist
  in
  let dist1 = scale p dist1 in
  let dist2 = scale (1.0 -. p) dist2 in
  fold_right add dist1 dist2
;;

let rec renormalize_with_float l f = match l with
  | [] -> []
  | (v, p) :: xs -> 
    match v with
    | Bot -> renormalize_with_float xs f
    | Val(v) -> (v, dv p f) :: renormalize_with_float xs f
;;
let renormalize_with_bot l = 
  let rec prob_of_bot = function
    | [] -> 0.
    | (v, p) :: xs -> 
      match v with | Val(_) -> prob_of_bot xs | Bot -> p in
  let x = 1. -. prob_of_bot l in
  renormalize_with_float l x
;;
let exp l  = 
  let sum = fold_left (fun x y -> x +. y) 0.0 in 
  let filt = filter (fun ((a,b),p) -> a) l in
  let mapped = map (fun ((a,b),p) -> (b,p)) filt in 
  fold_left (fun x (l, p) -> x +. ((sum l) *. p)) 0.0 mapped
;;

let distribution = handler
    (* dappl_j of only one value. *)
  | v -> [(Val(v, []), 1.0)]
    (* Combine possible dappl_js. *)
  | effect (Flip p) k    -> combine p (continue k true) (continue k false)
  | effect (Reward n) k  -> 
    map (fun (x,q) -> match x with | Val(k, l) -> (Val(k, n :: l), q) | Bot -> (x,q) ) 
      (continue k ())
  | effect (Observe b) k -> if b then k () else [(Bot, 1.0)] 
  | finally l            -> exp (renormalize_with_bot l)
;;

(* Here's an example dappl program. *)

(* should equal 0 *)
let test1 = 
    with dappl_j handle
        rew 2. ;
        let x =  observe false ; flip 0.5 in
        if x 
            then (rew 1. ; true)
            else (rew 0. ; true)
;;

(* should equal 3 *)
let test2 = 
    with dappl_j handle
        rew 2. ;
        let x = flip 0.5 in
        let y = observe x ; flip 0.5 in
        if x 
            then (if y then (rew 2. ; true) else (rew 0. ; true))
            else (rew 0. ; true)
;;

(* should equal 2 2/3 *)
let test3 = 
    with dappl_j handle
        rew 2. ;
        let x = flip 0.5 in
        let y = flip 0.5 in
        observe (x || y) ;
        if x 
            then (rew 1. ; true)
            else (rew 0. ; true)
;;

(* should equal 1/3 *)
let test4 = 
    with dappl_j handle
        let x = flip 0.5 in
        let y = flip 0.5 in
        let z = x && y   in
        observe (x || y) ;
        if x 
            then (if z then (rew 1. ;  true) else (rew 0. ; true))
            else (rew 0. ; true)
;;

(* should equal 1 *)
let test5 = 
    with dappl_j handle
        let x = flip 0.5 in
        let y = rew 1. ; observe x ; x in 
        y

(* should equal 0 *)
let test6 = 
    with dappl_j handle
        rew 1. ;
        let x = flip 0.5 in 
        observe x ;
        if x then false else true

(* should equal 1 *)
let test7 = 
    with dappl_m handle
        let y = (rew 1. ; false) in true